{{ define "formation" }}
  {{ if .Process.Balancer }}
    "{{ upper .Process.Name }}BalancerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "{{ .Process.Name}} Balancer",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" }
        ],
        "VpcId": { "Ref": "BaseVpc" }
      }
    },
    "{{ upper .Process.Name }}Balancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [
          { "Ref": "BaseSubnet0" },
          { "Ref": "BaseSubnet1" },
          { "Ref": "BaseSubnet2" },
          { "Ref": "BaseSubnet3" }
        ],
        "ConnectionDrainingPolicy": { "Enabled": true, "Timeout": 60 },
        "ConnectionSettings": { "IdleTimeout": 60 },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": 5,
          "Target": "HTTP:3000/",
          "Timeout": 3,
          "UnhealthyThreshold": "2"
        },
        "LBCookieStickinessPolicy": [{ "PolicyName": "affinity" }],
        "LoadBalancerName": "{{ .Process.App }}-{{ .Process.Name }}",
        "Listeners": [
          { "Protocol": "HTTP", "LoadBalancerPort": "80", "InstanceProtocol": "HTTP", "InstancePort": "3000" }
        ],
        "SecurityGroups": [ { "Ref": "{{ upper .Process.Name }}BalancerSecurityGroup" } ]
      }
    },
  {{ end }}
  "{{ upper .Process.Name }}Kinesis": {
    "Type": "AWS::Kinesis::Stream",
    "Properties": {
      "ShardCount": 1
    }
  },
  "{{ upper .Process.Name }}IamRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          }
        ]
      },
      "Path": "/",
      "Policies": [
        {
          "PolicyName": "{{ upper .Process.Name }}Role",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [ "logs:*" ],
                "Resource": [ "arn:aws:logs:*:*:*" ]
              },
              {
                "Effect": "Allow",
                "Action": [ "kinesis:PutRecords" ],
                "Resource": [ "arn:aws:kinesis:*:*:stream/{{ .Process.App }}-*" ]
              },
              {
                "Effect": "Allow",
                "Action": [ "cloudwatch:PutMetricData" ],
                "Resource": [ "*" ]
              }
            ]
          }
        }
      ]
    }
  },
  "{{ upper .Process.Name }}InstanceProfile": {
    "Type": "AWS::IAM::InstanceProfile",
    "Properties": {
      "Path": "/",
      "Roles": [ { "Ref": "{{ upper .Process.Name }}IamRole" } ]
    }
  },
  "{{ upper .Process.Name }}LaunchConfiguration": {
    "Type": "AWS::AutoScaling::LaunchConfiguration",
    "Properties": {
      "AssociatePublicIpAddress": true,
      "BlockDeviceMappings": [ 
        { "DeviceName": "/dev/sda1", "Ebs": { "VolumeSize": "10", "VolumeType": "standard" } }
      ],
      "EbsOptimized": false,
      "IamInstanceProfile": { "Ref": "{{ upper .Process.Name }}InstanceProfile" },
      "ImageId": { "Fn::FindInMap": [ "Variables", "Ami", "Value" ] },
      "InstanceMonitoring": true,
      "InstanceType": "t2.micro",
      "KeyName": "production",
      "SecurityGroups": [ { "Ref": "BaseSecurityGroup" } ],
      "UserData": {{ template "userdata" . }}
    }
  },
  "{{ upper .Process.Name }}Instances": {
    "Type": "AWS::AutoScaling::AutoScalingGroup",
    "Properties" : {
      "LaunchConfigurationName" : { "Ref": "{{ upper .Process.Name }}LaunchConfiguration" },
      "AvailabilityZones": [ {{ array .Process.AvailabilityZones }} ],
      "VPCZoneIdentifier": [ 
        { "Ref": "BaseSubnet0" },
        { "Ref": "BaseSubnet1" },
        { "Ref": "BaseSubnet2" },
        { "Ref": "BaseSubnet3" }
      ],
      "Cooldown": 5,
      "DesiredCapacity": "{{ .Process.Count }}",
      "MinSize" : "1",
      "MaxSize" : "3",
      {{ if .Process.Balancer }}
        "LoadBalancerNames": [ { "Ref": "{{ upper .Process.Name }}Balancer" } ],
      {{ end }}
      "HealthCheckType": "EC2",
      "HealthCheckGracePeriod": 30,
      "MetricsCollection": [ { "Granularity": "1Minute" } ],
      "Tags": [
        { "Key": "Name", "Value": "{{ .Process.App }}-{{ .Process.Name }}", "PropagateAtLaunch": true }
      ]
    },
    "UpdatePolicy": {
      "AutoScalingRollingUpdate": {
        "MaxBatchSize": 1,
        "MinInstancesInService": 1
      }
    }
  },
{{ end }}

{{ define "userdata" }}
  {
    "Fn::Base64": {
      "Fn::Join": [ "\n", [
        "{",
        "  \"app\": \"{{ .Process.App }}\",",
        "  \"process\": \"{{ .Process.Name }}\",",
        "  \"logs\": {",
        { "Fn::Join": [ "", [ "    \"cwgroup\": \"", { "Ref": "BaseLogGroup" }, "\"," ] ] },
        "    \"cwstream\": \"{{ .Process.Name }}\",",
        { "Fn::Join": [ "", [ "    \"kinesis\": \"", { "Ref": "{{ upper .Process.Name }}Kinesis" }, "\"" ] ] },
        "  },",
        "  \"env\": [",
        { 
          "Fn::Join": [ "", [
            "    \"",
            {
              "Fn::Join": [ "\",\n    \"", [
                {{ safe .Env }}
                "CONVOX_APP={{ .Process.App }}"
              ] ]
            },
            "\""
          ] ]
        },
        "  ],",
        "  \"ports\": [ {{ ports .Process.Ports }} ]",
        "}"
      ] ]
    }
  }
{{ end }}
