{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "BlankCertificate": { "Fn::Equals": [ { "Ref": "Certificate" }, "" ] },
    "BlankKey": { "Fn::Equals": [ { "Ref": "Key" }, "" ] },
    "BlankRegistryHost": { "Fn::Equals": [ { "Ref": "RegistryHost" }, "" ] },
    "Development": { "Fn::Equals": [ { "Ref": "Development" }, "Yes" ] }
  },
  "Mappings": {
    "RegionConfig": {
      "us-east-1": { "Ami": "ami-d0b9acb8" },
      "us-west-2": { "Ami": "ami-6b88b95b" },
      "eu-west-1": { "Ami": "ami-ed7c149a" },
      "ap-northeast-1": { "Ami": "ami-c6c609c6" },
      "ap-southeast-2": { "Ami": "ami-39017e03" }
    }
  },
  "Outputs": {
    "AwsAccountid": {
      "Condition": "Development",
      "Value": { "Ref": "AWS::AccountId" }
    },
    "AwsRegion": {
      "Condition": "Development",
      "Value": { "Ref": "AWS::Region" }
    },
    "AwsAccess": {
      "Condition": "Development",
      "Value": { "Ref": "KernelAccess" }
    },
    "AwsSecret": {
      "Condition": "Development",
      "Value": { "Fn::GetAtt": [ "KernelAccess", "SecretAccessKey" ] }
    },
    "Cluster": {
      "Condition": "Development",
      "Value": { "Ref": "Cluster" }
    },
    "CustomTopic": {
      "Condition": "Development",
      "Value": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] }
    },
    "Dashboard": {
      "Value": { "Fn::GetAtt": [ "Balancer", "DNSName" ] }
    },
    "DynamoBuilds": {
      "Condition": "Development",
      "Value": { "Ref": "DynamoBuilds" }
    },
    "DynamoReleases": {
      "Condition": "Development",
      "Value": { "Ref": "DynamoReleases" }
    },
    "Rack": {
      "Condition": "Development",
      "Value": { "Ref": "AWS::StackName" }
    },
    "RegistryHost": {
      "Condition": "Development",
      "Value": { "Fn::If": [ "BlankRegistryHost",
        { "Fn::Join": [ ":", [ { "Fn::GetAtt": [ "Balancer", "DNSName" ] }, "5000" ] ] },
        { "Fn::Join": [ ":", [ { "Ref": "RegistryHost" }, { "Ref": "RegistryPort" } ] ] }
      ] }
    },
    "RegistryPassword": {
      "Condition": "Development",
      "Value": { "Ref": "Password" }
    },
    "Subnets": {
      "Condition": "Development",
      "Value": { "Fn::Join": [ ",", [ { "Ref": "Subnet0" }, { "Ref": "Subnet1" }, { "Ref": "Subnet2" } ] ] }
    },
    "Vpc": {
      "Condition": "Development",
      "Value": { "Ref": "Vpc" }
    }
  },
  "Parameters": {
    "Certificate": {
      "Type": "String",
      "Description": "SSL certificate",
      "Default": ""
    },
    "Development": {
      "Type": "String",
      "Description": "Development mode",
      "Default": "No",
      "AllowedValues": [ "Yes", "No" ]
    },
    "InstanceCount": {
      "Default": "3",
      "Description": "The number of instances in the runtime cluster",
      "Type": "Number"
    },
    "InstanceType": {
      "Default": "t2.small",
      "Description": "The type of the instances in the runtime cluster",
      "Type": "String"
    },
    "Key": {
      "Default": "",
      "Description": "SSH key name for access to cluster instances",
      "Type": "String"
    },
    "Password": {
      "Default": "",
      "Description": "Kernel HTTP password",
      "Type": "String"
    },
    "RegistryHost": {
      "Type": "String",
      "Description": "Registry host",
      "Default": ""
    },
    "RegistryPort": {
      "Type": "String",
      "Description": "Registry port",
      "Default": ""
    },
    "Version": {
      "Default": "latest",
      "Description": "Convox release version",
      "Type": "String"
    }
  },
  "Resources": {
    "CustomTopicRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "lambda.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Administrator",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [ { "Effect": "Allow", "Action": "*", "Resource": "*" } ]
            }
          }
        ]
      }
    },
    "CustomTopic": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "convox",
          "S3Key": "lambda-formation.zip"
        },
        "Handler": "lambda.external",
        "MemorySize": "128",
        "Role": { "Fn::GetAtt": [ "CustomTopicRole", "Arn" ] },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },
    "AvailabilityZones": {
      "Type": "Custom::EC2AvailabilityZones",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Vpc": { "Ref": "Vpc" }
      }
    },
    "KernelUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "Administrator",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [ { "Effect": "Allow", "Action": "*", "Resource": "*" } ]
            }
          }
        ]
      }
    },
    "KernelAccess": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "Serial": "1",
        "Status": "Active",
        "UserName": { "Ref": "KernelUser" }
      }
    },
    "Cluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "Tags": [
          { "Key": "Name", "Value": { "Ref": "AWS::StackName" } }
        ]
      }
    },
    "Gateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
      }
    },
    "GatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": { "Ref": "Gateway" },
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "Subnet0": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone0" ] },
        "CidrBlock": "10.0.1.0/24",
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "Subnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone1" ] },
        "CidrBlock": "10.0.2.0/24",
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "Subnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone2" ] },
        "CidrBlock": "10.0.3.0/24",
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "Routes": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "RouteDefault": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "Gateway" },
        "RouteTableId": { "Ref": "Routes" }
      }
    },
    "Subnet0Routes": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet0" },
        "RouteTableId": { "Ref": "Routes" }
      }
    },
    "Subnet1Routes": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet1" },
        "RouteTableId": { "Ref": "Routes" }
      }
    },
    "Subnet2Routes": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": { "Ref": "Subnet2" },
        "RouteTableId": { "Ref": "Routes" }
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Instances",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0" },
          { "IpProtocol": "tcp", "FromPort": "0", "ToPort": "65535", "CidrIp": "10.0.0.0/8" }
        ],
        "VpcId": { "Ref": "Vpc" }
      }
    },
    "IamRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ClusterInstanceRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:Submit*",
                    "kinesis:PutRecords"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "IamRole" } ]
      }
    },
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "IamInstanceProfile": { "Ref": "InstanceProfile" },
        "ImageId": { "Fn::FindInMap": [ "RegionConfig", { "Ref": "AWS::Region" }, "Ami" ] },
        "InstanceMonitoring": true,
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Fn::If": [ "BlankKey", { "Ref": "AWS::NoValue" }, { "Ref": "Key" } ] },
        "SecurityGroups": [ { "Ref": "SecurityGroup" } ],
        "UserData": { "Fn::Base64": 
          { "Fn::Join": [ "\n", [
            "#!/bin/bash",
            "yum -y update",
            { "Fn::Join": [ "", [ "echo ECS_CLUSTER=", { "Ref": "Cluster" }, " >> /etc/ecs/ecs.config" ] ] },
            "echo ECS_ENGINE_AUTH_TYPE=docker >> /etc/ecs/ecs.config",
            { "Fn::If": [ "BlankCertificate",
              { "Fn::Join": [ "", [ "echo 'ECS_ENGINE_AUTH_DATA={\"index.docker.io\":{\"username\":\"\",\"password\":\"\",\"email\":\"\"},\"", { "Fn::GetAtt": [ "Balancer", "DNSName" ] }, "\":{\"username\":\"convox\",\"password\":\"", { "Ref": "Password" }, "\",\"email\":\"user@convox.io\"}}' >> /etc/ecs/ecs.config" ] ] },
              { "Fn::Join": [ "", [ "echo 'ECS_ENGINE_AUTH_DATA={\"index.docker.io\":{\"username\":\"\",\"password\":\"\",\"email\":\"\"},\"", { "Ref": "RegistryHost" }, "\":{\"username\":\"convox\",\"password\":\"", { "Ref": "Password" }, "\",\"email\":\"user@convox.io\"}}' >> /etc/ecs/ecs.config" ] ] }
            ] },
            { "Fn::If": [ "BlankCertificate",
              { "Fn::Join": [ "", [ "echo 'OPTIONS=\"--insecure-registry=", { "Fn::Join": [ ":", [ { "Fn::GetAtt": [ "Balancer", "DNSName" ] }, "5000" ] ] }, " --host=unix:///var/run/docker.sock --host=0.0.0.0:2376\"' >> /etc/sysconfig/docker" ] ] },
              "echo 'OPTIONS=\"--host=unix:///var/run/docker.sock  --host=0.0.0.0:2376\"' >> /etc/sysconfig/docker"
            ] },
            "service docker restart",
            "docker start ecs-agent",
            "mkdir -p /etc/convox",
            { "Fn::Join": [ "", [ "echo \"", { "Ref": "AWS::Region" }, "\" > /etc/convox/region" ] ] },
            "curl -s http://convox.s3.amazonaws.com/agent/0.2/convox.conf > /etc/init/convox.conf",
            "start convox"
          ] ] } 
        }
      }
    },
    "Instances": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "LaunchConfigurationName" : { "Ref": "LaunchConfiguration" },
        "AvailabilityZones": [
          { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone0" ] },
          { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone1" ] },
          { "Fn::GetAtt": [ "AvailabilityZones", "AvailabilityZone2" ] }
        ],
        "VPCZoneIdentifier": [ 
          { "Ref": "Subnet0" },
          { "Ref": "Subnet1" },
          { "Ref": "Subnet2" }
        ],
        "Cooldown": 5,
        "DesiredCapacity": { "Ref": "InstanceCount" },
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": 0,
        "MinSize" : "1",
        "MaxSize" : "10",
        "MetricsCollection": [ { "Granularity": "1Minute" } ],
        "Tags": [
          {
            "Key": "Name",
            "Value": { "Ref": "AWS::StackName" },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Rack",
            "Value": { "Ref": "AWS::StackName" },
            "PropagateAtLaunch": true
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": 1,
          "MinInstancesInService": 1
        }
      }
    },
    "RegistryBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private"
      }
    },
    "RegistryUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "Administrator",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [ { "Effect": "Allow", "Action": "*", "Resource": "*" } ]
            }
          }
        ]
      }
    },
    "RegistryAccess": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "Serial": "1",
        "Status": "Active",
        "UserName": { "Ref": "RegistryUser" }
      }
    },
    "Balancer": {
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 60
        },
        "ConnectionSettings": {
          "IdleTimeout": 60
        },
        "CrossZone": true,
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": 5,
          "Target": "HTTP:3000/check",
          "Timeout": 3,
          "UnhealthyThreshold": "2"
        },
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "affinity"
          }
        ],
        "Listeners": [
          {
            "Protocol": "TCP",
            "LoadBalancerPort": "80",
            "InstanceProtocol": "TCP",
            "InstancePort": "3000"
          },
          { "Fn::If": [ "BlankCertificate",
            {
              "Protocol": "TCP",
              "LoadBalancerPort": "443",
              "InstanceProtocol": "TCP",
              "InstancePort": "3001"
            },
            {
              "Protocol": "SSL",
              "LoadBalancerPort": "443",
              "InstanceProtocol": "TCP",
              "InstancePort": "3000",
              "SSLCertificateId": { "Ref": "Certificate" }
            }
          ] },
          { "Fn::If": [ "BlankCertificate",
            {
              "Protocol": "TCP",
              "LoadBalancerPort": "5000",
              "InstanceProtocol": "TCP",
              "InstancePort": "3101"
            },
            {
              "Protocol": "HTTPS",
              "LoadBalancerPort": "5000",
              "InstanceProtocol": "HTTP",
              "InstancePort": "3100",
              "SSLCertificateId": { "Ref": "Certificate" }
            }
          ] }
        ],
        "LoadBalancerName": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroups": [
          {
            "Ref": "BalancerSecurityGroup"
          }
        ],
        "Subnets": [
          { "Ref": "Subnet0" },
          { "Ref": "Subnet1" },
          { "Ref": "Subnet2" }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "BalancerSecurityGroup": {
      "Properties": {
        "GroupDescription": {
          "Fn::Join": [
            " ",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-balancer"
            ]
          ]
        },
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "IpProtocol": "tcp",
            "FromPort": "5000",
            "ToPort": "5000"
          }
        ],
        "VpcId": {
          "Ref": "Vpc"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "Service": {
      "Type": "Custom::ECSService",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Cluster": { "Ref": "Cluster" },
        "DesiredCount": "1",
        "LoadBalancers": [
          { "Fn::Join": [ ":", [ { "Ref": "Balancer" }, "web", "3000" ] ] },
          { "Fn::Join": [ ":", [ { "Ref": "Balancer" }, "web", "4443" ] ] },
          { "Fn::Join": [ ":", [ { "Ref": "Balancer" }, "registry", "443" ] ] }
        ],
        "Name": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "kernel" ] ] },
        "Role": { "Ref": "ServiceRole" },
        "TaskDefinition": { "Ref": "TaskDefinition" }
      }
    },
    "ServiceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            },
            "PolicyName": "ServiceRole"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "DynamoBuilds": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "builds" ] ] },
        "AttributeDefinitions": [
          { "AttributeName": "id", "AttributeType": "S" },
          { "AttributeName": "app", "AttributeType": "S" },
          { "AttributeName": "created", "AttributeType": "S" }
        ],
        "KeySchema": [ { "AttributeName": "id", "KeyType": "HASH" } ],
        "GlobalSecondaryIndexes": [ {
          "IndexName": "app.created",
          "KeySchema": [ { "AttributeName": "app", "KeyType": "HASH" }, { "AttributeName": "created", "KeyType": "RANGE" } ],
          "Projection": { "ProjectionType": "ALL" },
          "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
        }],
        "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
      }
    },
    "DynamoReleases": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName" }, "releases" ] ] },
        "AttributeDefinitions": [
          { "AttributeName": "id", "AttributeType": "S" },
          { "AttributeName": "app", "AttributeType": "S" },
          { "AttributeName": "created", "AttributeType": "S" }
        ],
        "KeySchema": [ { "AttributeName": "id", "KeyType": "HASH" } ],
        "GlobalSecondaryIndexes": [{
          "IndexName": "app.created",
          "KeySchema": [ { "AttributeName": "app", "KeyType": "HASH" }, { "AttributeName": "created", "KeyType": "RANGE" } ],
          "Projection": { "ProjectionType": "ALL" },
          "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
        }],
        "ProvisionedThroughput": { "ReadCapacityUnits": "5", "WriteCapacityUnits": "5" }
      }
    },
    "Settings": {
      "Properties": {
        "AccessControl": "Private",
        "Tags": [
          {
            "Key": "system",
            "Value": "convox"
          },
          {
            "Key": "app",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Type": "AWS::S3::Bucket"
    },
    "TaskDefinition": {
      "Properties": {
        "Name": {
          "Ref": "AWS::StackName"
        },
        "ServiceToken": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
        "Tasks": [
          {
            "CPU": "100",
            "Environment": {
              "AWS_REGION": { "Ref": "AWS::Region" },
              "AWS_ACCESS": { "Ref": "KernelAccess" },
              "AWS_SECRET": { "Fn::GetAtt": [ "KernelAccess", "SecretAccessKey" ] },
              "CUSTOM_TOPIC": { "Fn::GetAtt": [ "CustomTopic", "Arn" ] },
              "CLUSTER": { "Ref": "Cluster" },
              "DYNAMO_BUILDS": { "Ref": "DynamoBuilds" },
              "DYNAMO_RELEASES": { "Ref": "DynamoReleases" },
              "HTTP_PASSWORD": { "Ref": "Password" },
              "MIXPANEL_TOKEN": "43fb68427548c5e99978a598a9b14e55",
              "RACK": { "Ref": "AWS::StackName" },
              "REGISTRY_HOST": { "Fn::If": [ "BlankRegistryHost",
                { "Fn::Join": [ ":", [ { "Fn::GetAtt": [ "Balancer", "DNSName" ] }, "5000" ] ] },
                { "Fn::Join": [ ":", [ { "Ref": "RegistryHost" }, { "Ref": "RegistryPort" } ] ] }
              ] },
              "REGISTRY_PASSWORD": { "Ref": "Password" },
              "RELEASE": { "Ref": "Version" },
              "ROLLBAR_TOKEN": "f67f25b8a9024d5690f997bd86bf14b0",
              "SUBNETS": { "Fn::Join": [ ",", [ { "Ref": "Subnet0" }, { "Ref": "Subnet1" }, { "Ref": "Subnet2" } ] ] },
              "VPC": { "Ref": "Vpc" }
            },
            "Image": { "Fn::Join": [ ":", [ "convox/kernel", { "Ref": "Version" } ] ] },
            "Links": [],
            "Memory": "128",
            "Name": "web",
            "PortMappings": [
              "3000:3000",
              "3001:4443"
            ],
            "Volumes": [
              "/var/run/docker.sock:/var/run/docker.sock"
            ]
          },
          {
            "CPU": "100",
            "Environment": {
              "AWS_REGION": { "Ref": "AWS::Region" },
              "AWS_ACCESS": { "Ref": "RegistryAccess" },
              "AWS_SECRET": { "Fn::GetAtt": [ "RegistryAccess", "SecretAccessKey" ] },
              "BUCKET": { "Ref": "RegistryBucket" },
              "PASSWORD": { "Ref": "Password" },
              "SETTINGS_FLAVOR": "s3"
            },
            "Image": { "Fn::Join": [ ":", [ "convox/registry", { "Ref": "Version" } ] ] },
            "Links": [],
            "Memory": "256",
            "Name": "registry",
            "PortMappings": [
              "3100:3000",
              "3101:443"
            ],
            "Volumes": []
          }
        ]
      },
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0"
    }
  }
}
