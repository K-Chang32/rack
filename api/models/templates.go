package models

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_service_postgres_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\xdd\x6e\xda\x30\x14\xbe\xe7\x29\x2c\x5f\x6d\x12\x63\x94\x6d\x17\x8b\xa6\x49\x14\x68\x15\x69\xeb\x50\x61\xdd\xc5\xd4\x0b\x63\x1f\x90\xb5\x60\x5b\xb6\xd3\xa9\xab\x78\xf7\xd9\x21\x09\x76\x42\xa0\xff\x28\xe4\x9c\xef\x3b\xff\xc7\x7e\x7a\x42\x0c\xd6\x5c\x00\xc2\x06\xf4\x03\xa7\x80\xd1\x6e\xd7\x43\xe8\xc9\xfd\x23\x84\xc7\xbf\x16\x4b\xd8\xaa\x8c\x58\xb8\x92\x7a\x4b\xec\x1d\x68\xc3\xa5\xc0\x28\x41\x78\x34\xbc\x18\xbe\x1b\x7e\x76\x7f\xb8\xbf\x57\x9f\x13\x4d\xb6\x60\x9d\x0e\x4e\x4a\x0a\x4f\x92\x65\x92\x3a\x06\xb6\xb0\x52\x93\x0d\x04\x32\x27\x5d\x3e\x2a\x28\xe8\x6e\xf2\xed\x0a\x74\x49\x55\x88\xa6\xb0\x26\x79\x66\x0b\xe9\xc5\x30\x96\x18\xaa\xb9\xb2\x95\x2b\xb5\x09\x64\xf6\x36\x90\xe1\xff\x00\xbd\xb9\xbe\x7c\x8b\x4b\xd4\xae\x82\xe3\x29\xb1\x64\x45\x4c\x97\x1f\x0b\xab\xb9\xd8\x74\xf9\x41\x94\x3a\xe5\x48\xa9\x8a\x58\x69\x03\x09\x97\x90\xb6\x0b\xa9\x30\x96\x08\x0a\x85\xd1\xd7\xb8\xc1\x56\x03\x3b\x1a\x6c\x39\xd5\xf2\x94\x3b\x95\x1d\x44\x33\x62\x0c\x5a\x4b\x1d\x78\x26\x19\x98\xb6\x6b\x73\xa7\xf8\x57\x6a\xf6\x02\xb7\x62\x9b\x0b\xd7\x48\xa0\x91\xaa\x78\x5a\x16\x16\xf9\x4a\x80\x35\x47\x0c\x38\xf4\x37\x6e\xec\x17\xd7\x76\x49\x32\x9b\x8c\x92\x64\xaf\x9b\x24\x29\xfb\xda\x65\xd3\x81\xee\xe6\x13\x64\x4a\xd6\x96\xb9\x9f\xae\xb3\x8b\x2a\xbc\x26\xcf\x4a\x1a\xbb\xd1\x2e\x4f\xe7\x03\xce\x2b\x3b\x2d\x0f\xee\x14\x3d\x1e\xec\x21\x4e\x17\x81\x0f\xf2\x74\x8c\x35\x73\x2f\xe0\xc7\x3f\x72\xab\xf2\x28\x9d\x78\x2e\xb5\xfd\xf4\xf1\xc3\x68\x49\xd5\x98\x31\xed\x45\x8e\x80\x64\x39\xec\x1f\xaf\x44\x92\x5c\x83\x1d\x5b\xeb\xbe\xff\x3e\xb4\x09\xee\x23\x3c\x13\x4c\x49\x2e\xec\xc0\x23\xc1\x18\x8c\xee\xd1\x2e\xec\x8f\x03\xb7\x7f\x7c\x1d\x77\x81\x6c\x10\xcf\xc4\xc3\xbc\xcc\x76\x38\xa1\x11\xf9\x2d\xac\x7d\x2e\x6a\x79\x17\x41\xd8\xc4\xc7\x08\x6a\x79\x17\x41\xd8\x34\xc7\x08\x6a\xb9\x27\x88\xca\x71\x0b\x46\xe6\x9a\x42\x54\x90\x05\xd0\x5c\x73\xfb\x78\xad\x65\xae\xce\xf5\x42\xac\x1c\x74\xc4\x5c\x4b\x05\xda\x72\x88\x67\xc7\x49\x0a\xd5\x46\xc3\x54\xad\x8b\xaa\xcd\xde\x0f\x11\x91\x91\x54\x6c\x8a\x52\xbb\x82\x05\x3a\xc8\xc7\x9b\x2a\x67\xd5\x4a\x2a\x33\xcf\x69\xa9\xf2\x75\xbc\xd2\x72\x5b\x16\x1f\xfb\x5e\xf0\xef\x96\xb2\xf9\x66\xc2\x99\x4e\x7d\xb4\x78\x38\x28\x7e\xdf\x0f\x71\x99\xac\xfd\xcf\x7d\xe4\x91\x9b\x92\x94\x45\x49\xf6\x73\x13\x00\x76\x1d\x9b\xe4\x5c\x52\x6f\xa7\xee\x63\x7a\x19\x2a\x3f\x2b\xa9\x11\xe4\x65\xc9\x2d\x70\x29\x33\x51\x38\xd5\xde\x3b\x19\x52\x3d\x2e\x67\xe3\x39\x0c\xd6\x73\x82\x39\x76\x08\xd7\x9e\xb5\x84\x07\x87\xca\x4c\x54\xc6\x26\xfe\x1c\x89\xb0\xd1\x51\xd6\x89\x4b\x19\x08\xcb\xd7\x1c\x74\x6c\xd8\xc7\xb3\xb0\x84\xfe\xb9\xd9\x0f\x53\x03\x7e\x53\x8f\x60\x7b\xf2\xfb\x9d\xb5\x6a\xa1\xc2\xd2\x37\x80\x33\xb1\x71\xd7\x1f\x7c\x7c\xd5\x3b\xf9\x77\x62\xdc\x7d\x26\x5e\x07\xed\x1d\xd0\x01\x89\xd7\x50\x7b\xf7\x44\xb0\x78\x7c\x22\x49\xbe\xca\x38\xcd\x1e\xc7\xd4\xad\x15\xc3\x57\x59\xe1\xef\x9a\x64\xa6\xd9\x77\xfb\xf2\x55\xdd\xb2\x51\x0d\x22\x77\x86\x44\x73\x5f\x4c\x7c\x98\xa7\x68\xf3\xb8\xd5\x76\xdf\xee\xd4\x5e\xf5\xb9\xeb\xb9\xdb\x23\x08\xe6\x2f\x8c\xff\x03\x00\x00\xff\xff\xde\x67\x65\x1d\x48\x0a\x00\x00")

func templates_service_postgres_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_service_postgres_tmpl,
		"templates/service/postgres.tmpl",
	)
}

func templates_service_postgres_tmpl() (*asset, error) {
	bytes, err := templates_service_postgres_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/service/postgres.tmpl", size: 2632, mode: os.FileMode(420), modTime: time.Unix(1442268015, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_service_redis_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\xd1\x6f\xda\x3e\x10\x7e\xe7\xaf\xb0\xfc\xf4\xfb\x49\x8c\x41\x27\x75\x6a\x34\x4d\x42\x0c\xaa\x48\x5b\x87\x80\x76\x0f\x55\x1f\x8c\x7d\x50\x6b\x89\x1d\xd9\x4e\xb7\xaa\xe2\x7f\xdf\xd9\x09\x10\x27\x1d\x6d\xa5\xb5\x80\x22\xdf\xdd\xf7\xdd\x7d\x77\xb6\xf3\xf4\x44\x04\x6c\xa4\x02\x42\x2d\x98\x07\xc9\x81\x92\xdd\xae\x47\xc8\x13\x7e\x09\xa1\xe3\x1f\xcb\x15\xe4\x45\xc6\x1c\xcc\xb4\xc9\x99\xbb\x01\x63\xa5\x56\x94\x24\x84\x9e\x0d\x47\xc3\x77\xc3\x0b\xfc\xd0\x7e\xe5\x3e\x67\x86\xe5\xe0\xd0\x87\x26\x35\x04\xae\x7e\x61\x8e\xad\x99\x85\xc6\x1a\xae\xae\x1e\x0b\x08\x30\x4b\x67\xa4\xda\xd6\x10\x55\x00\x6c\x58\x99\xb9\x60\x1d\xc6\x06\xcb\x8d\x2c\xdc\x3e\x83\xda\x91\x88\x9a\x81\x48\x25\xe0\x37\xad\x03\x76\xfb\x48\x9a\x2a\xeb\x98\xe2\x10\x38\xbb\x59\x9c\x4c\x02\x8d\x9c\xf1\x7b\x18\xb8\xb3\x41\x2e\xb9\xd1\x7f\x4b\x08\x1d\x57\xf7\x40\x1c\x22\x12\xbd\xc1\x54\x2a\x4e\xe2\x34\x29\xb1\xf8\x4e\x52\x73\x66\xed\x2f\x6d\xc4\x1b\x64\x89\xab\xbf\x56\x88\x2b\xc8\x7f\x48\xb0\x06\x62\x20\xd7\x0f\x20\xfe\xef\x12\x2d\xcb\xb5\x02\x67\x9f\x2f\xfc\xab\xb4\xee\x13\xb6\x39\x49\xa6\x93\xb3\x24\xa9\x7c\x93\x24\x15\x9f\x4f\xd4\x79\x33\x9f\x10\x5b\xa3\x76\xe8\x6e\x0a\xfe\x3c\xd5\x91\x05\xe3\x3d\xc5\x69\x86\x03\x72\xaf\x81\x4f\xbf\x97\xae\x28\xa3\x62\xe8\x5c\x1b\x77\xfe\xe1\xe3\xc5\x8a\x17\x63\x21\x8c\x37\x21\x00\xcb\x4a\xa8\x1e\x67\x2a\x49\x2e\xc1\x8d\x9d\x6f\xe6\x2d\xa1\x0b\x28\x32\xc9\x99\xa7\xba\x34\xba\x2c\x68\x1f\x31\x8c\xcc\x99\x79\x9c\x2a\x31\xd7\x52\xb9\x81\x07\x02\x6b\x29\xb9\x23\xbb\x66\xcf\x8e\x54\xfe\xf1\x9f\x50\x05\xa0\x16\xcf\x54\x3d\x2c\x40\x48\xdb\xdc\x3a\x11\xd1\x02\x36\x5e\xa6\x83\xdd\x47\x47\x3a\x2d\xc0\xea\xd2\x70\x88\x94\x5a\x02\x2f\x8d\x74\x8f\x55\x2e\x2f\x34\x29\x76\x6e\xb4\x6a\x6e\x74\x01\xc6\x49\x88\x47\x0a\x2d\xc1\xb5\xd5\x49\xe3\xeb\x20\xfb\xd3\xa5\xdf\x74\x8f\x18\x52\xb5\x0d\x8a\xa3\x6e\x0d\x1f\xe2\x8b\x4d\x0b\xa4\x74\x9a\xeb\xcc\x03\x3a\x1e\x64\x9c\x19\x9d\xd7\x3d\xa0\xbe\x25\x7e\x6d\xa5\xdb\x2b\x13\x29\x4c\xea\x4b\xa5\xa3\xe1\x20\xfc\xbf\x1f\x9d\xd3\x5a\xab\xea\xef\x2e\xca\x09\xa7\x37\x15\x91\xc6\x7e\x9e\x1b\x01\xbb\xce\xc0\x4f\xfc\xf1\x50\x6d\x9c\x17\x85\xcd\x98\x75\x32\x04\xec\xf7\xda\x1b\xe4\x6d\x29\xbb\xa8\x94\x0d\x28\x64\xdb\x82\x39\xec\xfb\x54\xd8\xa8\x9c\xfd\x69\x70\xb2\xa4\xce\xdc\xbe\xb2\xa4\xee\xbc\xbf\xa6\xae\x71\xe9\x34\xde\x2d\x92\xcf\x98\xcc\xf0\x10\x33\x53\xc5\xd6\x19\xf8\x36\x6c\x58\x66\xa1\xdf\x76\xfe\x26\x95\x36\xf5\x55\x74\x5d\x6c\x0d\x13\x3e\x1f\x67\xca\xd8\x35\x24\x75\xa5\xc5\xe1\xdc\x3f\x88\x10\x5d\x08\xc7\xba\x9f\x6d\xe7\x15\x5e\x69\x51\x70\xa7\xdf\x2d\x80\xa9\xda\xe2\x8d\x7a\x98\xfd\xb8\x29\x57\x65\x1e\xe2\x27\x59\x69\xeb\x8b\x92\x8e\x62\x97\x78\x86\x9b\x96\xb6\xbc\xf1\x40\x1c\x33\x0c\x8d\x59\x3a\xc6\x7f\x86\xe4\x5b\xf9\xc5\xdb\x2e\x8c\xc7\x6d\x73\x40\xa2\x7d\x8f\x07\xcb\x5d\x77\x50\x7a\xfb\xdf\x5d\x0f\x5f\x21\x40\x09\xff\xd6\xf0\x27\x00\x00\xff\xff\x64\xe5\x91\xd9\x4d\x08\x00\x00")

func templates_service_redis_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_templates_service_redis_tmpl,
		"templates/service/redis.tmpl",
	)
}

func templates_service_redis_tmpl() (*asset, error) {
	bytes, err := templates_service_redis_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/service/redis.tmpl", size: 2125, mode: os.FileMode(420), modTime: time.Unix(1442268015, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/service/postgres.tmpl": templates_service_postgres_tmpl,
	"templates/service/redis.tmpl": templates_service_redis_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"service": &_bintree_t{nil, map[string]*_bintree_t{
			"postgres.tmpl": &_bintree_t{templates_service_postgres_tmpl, map[string]*_bintree_t{
			}},
			"redis.tmpl": &_bintree_t{templates_service_redis_tmpl, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

