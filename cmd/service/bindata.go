package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _template_redis_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x59\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x20\xf4\xd4\x01\x69\x6b\x3b\x5d\xb7\xea\x2d\x71\xda\xd4\x68\xda\x1a\x91\x9b\x01\x0b\xfa\xc0\x48\x67\x9b\x88\x44\x0a\x14\x95\xcc\x33\xfc\xdd\x77\xa4\xfe\x98\x94\x64\x5b\xe8\xdc\xa6\x7f\x12\x4b\x3c\xf2\xee\x7e\xf7\xbb\xe3\x91\x5e\xaf\x49\x04\x73\xc6\x81\x78\x19\xc8\x47\x16\x82\x47\x36\x9b\x13\x42\xd6\xf8\x9f\x10\xef\xfc\xaf\x60\x06\x49\x1a\x53\x05\x1f\x84\x4c\xa8\xba\x05\x99\x31\xc1\x3d\xe2\x13\x6f\x34\x18\x0e\x5e\x0e\xde\xe1\x3f\xef\xb4\x10\x9f\x52\x49\x13\x50\x28\xe3\xf9\xe5\x12\x7a\x91\x38\x16\x4f\x41\xf0\xf1\x83\x14\x89\xf5\x1e\x47\x66\xab\x14\xcc\x52\x81\x92\x8c\x2f\xca\x65\xcc\xd0\x25\xcc\x69\x1e\x2b\x33\x3a\x78\x65\xfe\xbe\x1e\xb8\x02\x59\x28\x59\xaa\x2a\x6b\x8c\x16\x82\x6a\x88\xd6\x43\x5e\x8c\x27\x97\x37\x84\x0b\x45\xb5\xc4\x6f\x5e\x39\x71\x73\x5a\x5b\xf5\x48\x59\x4c\xef\x59\xcc\xd4\xea\x6f\xc1\x21\xdb\x61\xda\x58\x24\x09\xbd\x84\x98\x25\x4c\x41\x74\xcd\x32\xb5\xcb\xcc\xbd\xd6\x59\xda\x88\x51\x47\x5e\x64\x29\x84\x6c\xbe\x22\x67\x1d\xd6\x4d\x69\x96\x3d\x09\x19\xfd\x10\x5e\xfb\x0c\x09\x30\xcc\x20\x49\x5a\xad\x5f\x69\x3e\xb1\xf4\x7b\x5f\x73\x95\xe6\xca\x0d\x62\x14\x49\xfd\x4c\xbc\x5b\x1a\xe7\x50\x7c\xfc\xc0\x7d\xff\x0a\xd4\xb9\x52\xf8\x7c\x47\xbc\x0b\x1a\x53\x1e\x82\xf4\x4e\x51\xf1\x97\xe0\x0b\x92\xc1\x23\xdf\xc9\xc6\x76\x4c\x48\xe5\xae\xe3\xbd\x3d\xfb\xe3\x9d\xb7\xc3\x77\x47\xdd\x0d\xcc\xb5\x7c\x3d\xae\x17\x76\xec\xbe\x81\x4c\xe4\x32\x74\x62\xe9\xdd\xa6\x61\x07\x8a\xbe\x21\xb7\xef\xbf\x1f\x8f\x7c\xff\x76\x3a\xb6\x31\x9b\x4a\x91\x82\x54\xac\xc1\x09\x1c\x19\xb3\x48\x5e\xc4\x22\x7c\xd0\xf3\x87\x15\x2f\x87\x6f\xad\xd9\x28\x35\xe1\x99\xd2\x38\xcc\x80\xe3\xaf\x95\x96\x8d\xca\xf0\x38\x72\x33\xba\xd0\x1a\xee\xac\x77\x44\xfb\xf9\x09\xcc\x1c\x03\xdf\x69\x17\x02\xc6\xf2\x40\xd1\xf0\xa1\x80\xb8\xc2\xa1\xf8\xf3\xbd\xfe\xbc\x69\xf1\xea\x0a\x33\xf9\x89\xae\x0e\x01\x32\xe1\x98\xc4\x1c\x54\x25\x7e\x18\x9c\x9d\xaa\x90\x1c\x34\x5c\x26\xc0\x55\x8f\x28\xb4\xe7\xf4\x0a\x4b\xc3\xdc\x49\xe4\xa0\x55\x39\xb1\xb5\xad\xe2\x45\x43\x50\x33\xc5\x42\xb2\xed\x52\x90\xdf\xa3\x96\xc1\x21\x47\x0a\xb1\x7e\xa6\x37\xcb\xd0\x36\xb1\x02\x88\x21\x2c\x13\x0b\x2b\x9f\x1d\xfe\x56\xe9\x42\x06\x7c\x6f\xb8\xd7\xa6\xea\x10\xa9\x3a\x7a\xe3\x1d\x07\x84\xe1\xaf\x07\x61\x78\x0c\x10\x46\xc7\x04\x61\xf4\xeb\x41\x18\x1d\x03\x84\xb3\xe3\x80\x70\x23\x72\xd5\xb9\x6f\x3a\x18\x18\xa9\x19\xbd\x8f\xa1\x1f\x0e\x3f\x6a\x48\xb5\x03\xf6\x31\xa7\x9f\x25\xb8\x77\x2a\xc6\x4d\x03\xe1\x60\xd8\xd5\x8f\x6c\x0b\x5e\xbf\xea\xb3\x45\xa5\x21\x5f\x82\xda\xa7\x0e\xf5\xc3\xbf\x10\xde\xea\x3b\xcf\x32\x11\x32\xe3\x55\x3f\x18\x8a\x05\x1a\x66\x56\xa5\xf0\xf8\x6e\x0d\x9f\xdf\xad\xe1\x4f\x70\x6b\xf4\xfc\x6e\x8d\x8e\xeb\x16\x84\xb9\xc4\xba\x73\x25\x45\x9e\x1e\x74\xcb\x11\xee\xe5\x88\x11\xb5\xdb\x57\x7f\xdb\x59\x65\x6e\xe6\x39\xab\x4f\xf8\x42\x42\xd6\xd9\x58\x4d\x52\x54\xa7\x44\x28\x62\xbd\x98\x0a\x53\xdd\x5e\xe9\xe3\x42\xd9\x95\x7a\x23\x5d\x5e\xbd\x99\x70\x9f\x75\xf2\x4f\x52\xb7\x03\xb3\xcf\x34\x76\x83\xdb\x5f\x97\x69\x7b\x1d\x6d\xd5\x9b\x5a\x9f\x55\x69\xdc\x0e\xef\xff\x56\xee\xaa\x51\x7f\x8e\x18\x4a\x88\x58\x46\xee\xeb\xa3\xc2\x4f\x09\x64\x1f\x70\xed\xfe\xfd\xe7\xc0\xbb\x0f\xd1\x98\xe2\xe6\x12\x5e\x0b\x1a\x15\xd2\x78\x9e\xf3\xfd\xed\xa3\x83\xcc\xc1\x74\xef\x04\x69\x6f\xa5\x6e\x4b\x34\x8b\x5e\x5b\x62\xb4\x0f\xa6\xb1\xe0\x1c\xbb\x14\x0c\xf2\xa5\xa4\x8c\xa3\x3b\x53\x11\x33\x73\xfa\xc1\x75\xde\x73\x5d\x65\x34\x8c\x4a\xe6\xa0\x03\xc3\x12\xc0\x22\x83\x2f\xde\x0e\x9a\xfd\x4a\xbd\x52\x00\x0a\x37\x60\x73\x48\xd2\x41\x8f\x62\xd8\x37\x4d\x8a\x2c\x2b\x1b\x27\xa3\xc4\x1e\xfc\x08\x34\x56\xcb\xf1\x12\xcc\x0e\xbe\x76\xdc\x2c\x07\x57\xb3\x25\xd2\x6d\x29\xe2\xc8\x64\xbe\xe7\x62\x51\x9c\x31\x1e\xa9\x26\xdc\xef\x8d\xa1\x19\x95\x0b\x30\x24\x9b\x8d\xa7\x7e\x41\xb4\x86\x44\x6d\xf6\x59\x63\xe4\x1b\x5f\x76\x6a\xb7\xa4\x5c\x37\xaf\x2f\xc6\x42\x3c\x30\x08\x90\x3d\x0f\x0c\x5b\xbe\xac\xc6\xf9\x6e\xad\xcf\xd7\xfa\xc1\x1c\x0b\x71\x1d\x3a\x9f\x63\x28\x94\xee\x3e\xdc\x68\xe9\x7b\x0c\xe0\xc5\x45\x4d\x8b\x38\x76\x6e\xa1\x47\x3a\x6b\x6c\x62\x36\x33\xaa\x2a\xca\x1d\xd3\xea\x21\x7b\xca\x1e\x12\x05\xe1\x12\x0a\xcb\x99\x39\xd2\x21\xdc\xbb\xeb\x83\xb1\xdd\x22\x69\x77\x51\xd3\x0d\xf1\x9e\x54\xbd\xa6\x39\x0f\x97\x48\xb9\x39\x5b\xe4\x92\x96\x45\x6a\x57\xd6\x9e\xe7\x4a\x04\x21\x8d\x8b\x64\xed\x98\xda\xaf\xd3\x2f\xf7\x74\x98\xe6\xf7\x18\xad\x49\xaa\x2f\x57\x8a\x4a\xd7\x22\xae\x69\x3a\x2f\x41\x5f\xcd\x7d\xa6\x69\x5a\x66\xc3\x1d\x69\xc6\xac\x10\xa9\xe2\xfe\x3a\x82\xc7\xd7\x59\x44\xf5\x91\xc9\x7b\x7f\x5f\x26\xd0\xad\x88\xf3\x04\x02\xf6\x2f\x14\xe5\xcf\x5c\x2e\x98\x77\x95\x93\x3a\x5a\x11\xb5\xaf\x56\xba\xa2\x84\x0b\x7e\xc5\x72\x9e\xe0\x42\x9a\xad\x73\x1a\x67\xae\xd1\x93\x84\x2e\x8a\x96\xc2\xa3\x09\x7b\xf9\x67\x08\x6f\xde\x01\xbc\xe9\xbe\x25\xf9\x2c\x90\xa1\xc2\xdc\x67\x75\xf8\x5f\xdf\xa5\x94\x16\xaa\xd1\xab\x84\x85\x52\xb8\x6b\x7d\x82\x9a\xf2\xa9\x14\x51\x1e\x36\x82\x71\x88\x3a\x6d\xca\x38\x73\xbf\x65\x20\x2f\xa9\xa2\x5a\xd4\xdb\x43\xa6\x6d\x7b\xd2\x93\x42\xd6\xc3\xbe\x5d\x95\x34\x08\xd4\xc1\xbc\xe2\x22\xc8\xde\xa5\xba\xe8\xd9\xa8\x25\x5d\x77\xa0\x77\x07\x8f\x97\xee\xee\x38\x1d\xeb\x91\x49\x04\x5c\xb1\x39\x33\x7b\x5e\x9b\x9d\xbf\x7a\x2b\xc2\x32\x2a\x9e\x78\xb3\x54\xeb\x03\x1d\xc3\xf6\x63\x4c\x53\x1a\xea\xaa\xe8\x9b\x4b\x05\x5b\xe2\x33\xe3\x26\x3f\x48\xc7\x10\xfd\xa7\x1e\x72\x77\x07\xa7\x3a\xea\x40\xec\xaa\x4c\x6d\xf8\xac\x7d\xa9\x62\x09\xf6\x5a\xde\x2e\x99\x2b\x49\xb1\x98\x82\x64\x42\x27\xd7\xd9\x60\xcb\x45\x8b\x38\xdf\xd2\x48\xd7\x96\x7a\xf7\x75\x22\xbe\x25\xdc\x8d\x88\xf5\xaf\x42\xba\xbd\x29\xa2\xbb\x17\x54\x85\xcb\xb2\x5c\x0c\x1b\xfb\x16\x02\x55\xb3\x7d\xc2\x83\xf2\xcb\x03\x94\xb3\x37\xae\x76\xaa\x9c\x54\x3f\x37\x27\xeb\x35\x01\x1e\xe9\xaf\x1b\xfe\x0b\x00\x00\xff\xff\xbb\xda\xe3\xe1\x86\x18\x00\x00")

func template_redis_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_template_redis_tmpl,
		"template/redis.tmpl",
	)
}

func template_redis_tmpl() (*asset, error) {
	bytes, err := template_redis_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "template/redis.tmpl", size: 6278, mode: os.FileMode(420), modTime: time.Unix(1428962792, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/redis.tmpl": template_redis_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"template": &_bintree_t{nil, map[string]*_bintree_t{
		"redis.tmpl": &_bintree_t{template_redis_tmpl, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

