package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _init_rails_dockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x97\x7e\x4a\x92\xbe\x96\x5e\x71\x61\x4e\x66\x49\xaa\x31\x2a\x4f\x37\x2b\xbf\xb4\x28\x2f\x31\x87\x4b\x3f\x27\x3f\x5d\x5f\x8b\x4b\xbf\x24\xb7\x80\x0b\x10\x00\x00\xff\xff\xa0\x04\x95\x56\x4e\x00\x00\x00")

func init_rails_dockerignore_bytes() ([]byte, error) {
	return bindata_read(
		_init_rails_dockerignore,
		"init/rails/.dockerignore",
	)
}

func init_rails_dockerignore() (*asset, error) {
	bytes, err := init_rails_dockerignore_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/rails/.dockerignore", size: 78, mode: os.FileMode(420), modTime: time.Unix(1463790496, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _init_rails_dockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func init_rails_dockerfile_bytes() ([]byte, error) {
	return bindata_read(
		_init_rails_dockerfile,
		"init/rails/Dockerfile",
	)
}

func init_rails_dockerfile() (*asset, error) {
	bytes, err := init_rails_dockerfile_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/rails/Dockerfile", size: 496, mode: os.FileMode(420), modTime: time.Unix(1463789831, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _init_rails_docker_compose_yml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func init_rails_docker_compose_yml_bytes() ([]byte, error) {
	return bindata_read(
		_init_rails_docker_compose_yml,
		"init/rails/docker-compose.yml",
	)
}

func init_rails_docker_compose_yml() (*asset, error) {
	bytes, err := init_rails_docker_compose_yml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/rails/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1463789831, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _init_ruby_dockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func init_ruby_dockerignore_bytes() ([]byte, error) {
	return bindata_read(
		_init_ruby_dockerignore,
		"init/ruby/.dockerignore",
	)
}

func init_ruby_dockerignore() (*asset, error) {
	bytes, err := init_ruby_dockerignore_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/ruby/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1463790496, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _init_ruby_dockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func init_ruby_dockerfile_bytes() ([]byte, error) {
	return bindata_read(
		_init_ruby_dockerfile,
		"init/ruby/Dockerfile",
	)
}

func init_ruby_dockerfile() (*asset, error) {
	bytes, err := init_ruby_dockerfile_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/ruby/Dockerfile", size: 298, mode: os.FileMode(420), modTime: time.Unix(1463789831, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _init_ruby_docker_compose_yml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func init_ruby_docker_compose_yml_bytes() ([]byte, error) {
	return bindata_read(
		_init_ruby_docker_compose_yml,
		"init/ruby/docker-compose.yml",
	)
}

func init_ruby_docker_compose_yml() (*asset, error) {
	bytes, err := init_ruby_docker_compose_yml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/ruby/docker-compose.yml", size: 200, mode: os.FileMode(420), modTime: time.Unix(1463789831, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _init_sinatra_dockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func init_sinatra_dockerignore_bytes() ([]byte, error) {
	return bindata_read(
		_init_sinatra_dockerignore,
		"init/sinatra/.dockerignore",
	)
}

func init_sinatra_dockerignore() (*asset, error) {
	bytes, err := init_sinatra_dockerignore_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/sinatra/.dockerignore", size: 30, mode: os.FileMode(420), modTime: time.Unix(1463790496, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _init_sinatra_dockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func init_sinatra_dockerfile_bytes() ([]byte, error) {
	return bindata_read(
		_init_sinatra_dockerfile,
		"init/sinatra/Dockerfile",
	)
}

func init_sinatra_dockerfile() (*asset, error) {
	bytes, err := init_sinatra_dockerfile_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/sinatra/Dockerfile", size: 301, mode: os.FileMode(420), modTime: time.Unix(1463789831, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _init_sinatra_docker_compose_yml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func init_sinatra_docker_compose_yml_bytes() ([]byte, error) {
	return bindata_read(
		_init_sinatra_docker_compose_yml,
		"init/sinatra/docker-compose.yml",
	)
}

func init_sinatra_docker_compose_yml() (*asset, error) {
	bytes, err := init_sinatra_docker_compose_yml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "init/sinatra/docker-compose.yml", size: 132, mode: os.FileMode(420), modTime: time.Unix(1463789831, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_go = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x98\x4b\x6f\x23\xb9\x11\xc7\xcf\xd6\xa7\xe8\x18\xd8\x85\x14\x38\x72\xbf\x1f\x06\xe6\xb2\xbb\x09\xb0\x87\xec\x21\x8f\x53\x1c\x18\xec\x6e\xd2\x69\xac\x2d\x39\x92\xbc\xb1\x67\x30\xdf\x3d\xf5\x63\x51\xb6\xac\x91\x2d\x47\xb1\x77\x10\xe4\x40\x89\x4d\x16\xeb\x41\x56\xfd\x59\xc5\x1b\xd3\xfd\x6c\x2e\x6d\xb4\xb2\xd7\x37\x57\x66\x65\x97\xa3\xd1\x70\x7d\x33\x5f\xac\xa2\xf1\xe8\xe8\xb8\xbd\x97\x91\x63\xe9\x74\xf3\xeb\x9b\x85\x5d\x2e\x4f\x2f\x3f\x0e\x37\x0c\xb8\xeb\x15\x7f\xc3\x9c\xdf\xe5\x6a\x31\xcc\x2e\x3d\xe1\xdc\xff\xae\x86\x6b\xab\xd3\xa7\xc3\xfc\x76\x35\x5c\xf1\x71\x63\x56\xff\x58\xff\x9f\xba\xe1\xca\xea\xc0\x64\x34\x72\xb7\xb3\x2e\x6a\x87\x59\x6f\x56\xe6\x62\x61\x4d\x3f\xa6\x17\xfd\xed\xef\xc8\x3f\x89\x66\xe6\xda\x46\x2a\x63\x12\x8d\xd7\xa3\x76\xb1\x98\x2f\x26\xd1\xa7\xd1\xd1\xe5\x47\xff\x15\x9d\x7d\x88\x50\x6f\xfa\x93\xfd\xd7\x9f\x84\x89\x5d\x8c\xbd\xfe\x7c\x7f\x77\xeb\x9c\x7c\xc3\x76\x32\x19\x1d\x0d\xce\x2f\xf8\xcd\x87\x68\x36\x5c\xc1\xe2\x68\x61\x57\xb7\x8b\x19\x9f\x27\x91\xd8\x36\xfd\x3d\xdc\xdd\xf8\x18\x46\xd1\x37\xff\x3c\x8b\xbe\xf9\xe5\x58\x35\xf1\xb2\x84\xc7\xe7\xd1\xe8\xe8\x17\xb3\x88\xda\x5b\x17\xa9\x1c\x15\x32\x3a\xba\x50\x75\x3e\x44\xc3\x7c\xfa\xfd\xfc\xe6\x7e\xfc\xad\xd0\x9c\x88\x6e\x13\x74\x9d\x7e\x7f\x35\x5f\xda\xb1\x98\xfd\x66\x6a\x84\x55\x22\x65\xfa\x1d\x9a\x8c\x27\x27\xb0\x18\xc9\xdc\xea\xfe\xc6\x46\x66\xb9\xb4\x2b\x76\xf0\xb6\x5b\x21\xc6\xab\x1b\xb6\x57\xb4\x98\xb9\x79\x14\xcd\x97\xd3\x3f\xc8\x99\xfc\x28\x1f\x0f\xeb\xd6\x47\xc2\x61\x5d\x78\xb2\x47\x1e\x1b\x87\x32\x3a\x5a\x0e\x1f\x6d\x34\xcc\x56\x65\x3e\x3a\xba\x9e\xf7\x76\xcd\xed\x8f\xd2\xf7\x23\x7f\x11\x87\x88\xf0\x8a\x29\x3d\x04\xf8\x33\x1f\xbb\xe1\x4b\x21\x93\xe8\x27\xe1\x3d\x9e\x04\xee\x08\x0b\x06\xba\x61\x8a\x58\x59\xfe\xd2\xea\x3f\x8b\x32\xb2\xda\xab\xf3\x74\x31\x6a\xee\x59\x8c\xc6\xb2\x78\x43\xff\xa7\x2c\xb0\x6e\x3f\x0b\x8c\x14\x2e\x0f\x06\x7f\xc1\x23\xec\xc2\x4b\x6c\x7e\x5c\xfe\x30\x2c\x84\x49\x3b\x9f\x5f\x6d\xae\x37\x57\xcb\xbd\x3b\x70\xbf\xd4\x0d\xb0\x0b\x67\x3a\xfb\xe9\xf3\xc6\xfa\xe0\x17\x78\xae\x50\x0f\xab\x8b\x85\x19\xae\x96\x17\xfd\xbc\xfb\xd9\x2e\x86\xcb\xd9\x7c\x61\xc5\x73\xd5\x37\xc6\xc7\xe7\x77\x89\x3b\xbf\xab\xdb\xf3\xbb\xb8\x96\x16\x87\xd6\x9c\xdf\x95\x56\xc6\xc3\x98\x13\x9a\x3e\x95\x56\x9d\xdf\xe5\x42\x9b\x9a\xf3\xbb\xae\xd7\x7e\x27\xb4\xb9\x34\x5b\x3c\xa5\xe9\x64\x7d\x27\xeb\x52\xfa\xd2\x8c\x53\x5e\x99\xd0\x14\xd2\x5c\x26\xe3\xc2\xa7\x96\xb1\x32\x3f\xbf\xab\xa4\x5f\x96\x2a\xbb\x11\x1e\x95\xac\xcf\x65\xac\x11\xda\x56\xfa\x8d\xcc\x15\xf2\x5f\x25\x42\x27\x2d\xb7\x4a\x8f\x6c\x23\x74\x59\xa2\x7a\xe5\x22\x27\xab\x54\x6e\x2b\xfd\x56\x78\xa7\x62\x47\xea\x94\xa6\x0e\xfa\x65\xe8\x56\xe9\x7f\x21\xb6\x14\x61\x1f\xf2\xb0\x2e\x95\x75\x6d\xa5\xfa\xc5\x32\x96\xc4\x8f\xfb\xc3\x7e\xd0\x0c\xdf\x42\xd7\x88\xed\x45\xa9\x3a\x3d\xec\x61\x7c\xbc\x46\xbe\x67\x8e\xe1\xa2\xd5\x58\xde\x05\x79\xeb\x88\xdf\xc4\x4c\x81\x8f\xe7\x4e\xf4\x44\xe6\x8e\x99\x3b\xf5\x73\xa7\xd3\xcd\xc9\x63\x99\x9d\x3c\x84\xe4\x33\x1c\x50\xe3\xb7\x1e\x47\x36\xd5\xf0\x1a\x3e\x80\xef\x1e\x3b\xf6\xe1\x9d\x4c\x29\x9c\x79\xa4\x11\x7e\x5f\x78\xf6\x27\xa2\xff\x2c\x7a\xc1\x92\x88\x10\x3f\x8b\xaa\xfa\x24\x22\x52\xcf\x36\x03\x79\x9c\xa7\xf1\xc4\x8f\x13\x7d\x67\x1a\x9d\x7f\x9d\x0d\x77\xe3\x24\x2f\xb3\xaa\x89\xf3\xa6\x3c\x89\xe2\xc9\xe7\xd1\x91\x41\xfc\xb7\xde\xdc\x4f\x5e\xfb\xb3\x28\x98\x8a\x1a\x67\x91\xff\xfb\xfc\x70\x0c\xe6\xe4\xe5\xb0\xc2\x80\x83\x82\xaa\xec\xc4\x71\xa4\xdf\xb6\xea\x3c\x9d\x38\x53\x16\xab\xb3\x59\x99\x73\xe2\x98\x49\xa1\xce\xdc\x27\xea\xa4\x04\x4a\x61\xd4\x41\x8d\xf0\xb2\xb1\xf2\xe0\x3b\x96\xf1\xd6\x68\x70\x65\x04\xa5\xac\x2b\xe1\x45\x60\xd6\x1a\x44\x49\x70\x7c\x47\x10\x56\xaa\x43\x1f\x02\x2f\x15\x19\x46\xc6\x4c\xae\xc1\x99\x75\xaa\x47\x23\x73\x4e\xe6\x2a\xe1\x5b\xb5\x1a\x9c\x71\x11\x82\xbe\x57\x30\xc0\x9e\x4c\xd6\x15\x42\x97\x10\xb8\x42\x57\x13\xd8\x04\x1f\x36\x09\x9f\x54\xe4\xb8\x58\xc1\x01\x7b\x9b\x58\x83\x0d\x7b\x09\xd4\x56\xd6\x36\x42\xdf\xc5\xaa\x4b\x55\xaa\xde\xb5\xf4\x1d\xba\xa3\x1f\xfb\x24\x72\x2b\x69\x89\x8c\x75\x32\xd6\x62\x1b\xfb\x21\x63\x2d\x7a\xe5\x1a\xf0\xc8\x70\x8d\x82\x46\x9e\x2b\xb0\xf4\x7c\x33\x97\x29\x58\x31\x8f\x0c\x40\xc2\x34\x7a\x66\x05\xfb\x0a\x40\x85\x31\x00\x87\xfd\xc2\xe6\xd4\x2a\xa0\x21\x17\xbb\xfa\x42\xff\xd9\x97\x56\x6c\xec\x3a\x05\x34\x6c\x4f\xa0\xad\xf4\x6c\x1a\xab\x76\x5b\x91\xdd\x38\xdd\x87\x3a\x55\x39\x4d\xa7\xbc\x9d\xfc\x67\x85\x82\x24\xeb\x01\xb8\x32\xec\x03\xf2\x01\x5b\xce\x1f\x1a\x1b\xe4\x40\x83\x1f\xc4\xa5\xfa\x11\xb4\xb6\x09\xfe\x63\x14\x84\xf1\x39\xf6\x0f\x59\xb6\x57\x40\xf5\xe7\x85\xaf\xd4\xba\x8e\x33\xaf\x3a\x3d\x73\xec\x37\xa5\xea\x80\x1f\x65\xb2\xa6\x2e\x95\x0f\xe7\x94\x65\xaa\x2b\xbe\x59\x1a\xf5\x03\x80\x12\xf0\x44\xdf\xd8\xaa\x8f\xb2\xef\x45\xa1\xfa\xe0\x17\x6d\xe8\x03\xac\x69\xf0\xed\x22\xf4\xfd\xf9\xb5\x6a\x1b\x3c\xfb\x4c\x01\x9d\xf3\xee\xb9\x28\xb0\x37\xf8\x33\x7b\x9e\x95\xba\xd7\xc8\x4e\x85\xb6\x2e\xd4\xc7\x92\x5c\x65\xe7\x95\xce\x13\x43\xcc\x73\x39\xe1\x67\x5c\x44\x9c\x79\x13\xfc\x03\x1f\x80\x2f\x17\x07\xf6\xe3\xb7\xec\x49\xdc\x7f\x09\xf8\xf8\x06\xfa\x70\x9e\xde\xb7\x98\x4f\xf6\x03\xbe\x47\xb8\xb7\x80\x7b\x18\x6d\x83\xfd\x0f\x0f\x33\x7b\x90\x1e\x92\x83\x70\x7e\x53\xfd\x77\x41\xf9\x4d\x13\x02\xc4\x7b\xb0\xfe\x4f\x31\xbe\x6e\xea\x2c\x79\x1f\x8c\xbf\xa0\x44\x92\xc4\xfe\xe2\xfe\xfa\xea\x20\xac\x5f\x27\x27\x39\xf1\x97\x2a\x26\x93\x08\x81\xdd\x79\xfd\x98\x54\xe1\xb3\x24\x35\x60\x21\xf3\x3d\xfc\x32\xc5\x04\xf0\x37\x91\xff\x26\xd3\x39\xbe\x6b\xf8\x26\x8a\x25\xe0\xff\xfa\x0e\xe0\x1f\xbc\xf0\xf8\x87\x3e\x85\xf6\x89\x39\x30\x24\x0e\xdf\x39\xf1\x13\xc6\xc0\x67\x5a\x57\x3e\xd2\xe4\x81\x2e\x0d\xff\x6b\x9e\xe0\x42\x5b\xea\x38\x7d\x30\xd9\xe3\x30\x31\x9d\x6b\x23\x6e\xfd\x9d\x13\x92\x24\x30\x25\x4e\x55\x07\x8f\x17\x32\x6e\x13\xc5\x96\x02\xdd\x02\xf6\x36\xa1\xbf\x6e\x79\xac\x36\xf0\xdf\x06\xbc\xf5\x71\xc8\x5d\x53\xe9\xf7\x76\xac\x72\x87\xc0\x3b\x4d\x15\x73\xc1\xb2\xd7\x24\x67\x9b\x07\xfd\x26\x31\xbb\xc9\x70\x3b\x76\x95\xe2\x77\x81\x62\x2a\x14\x7b\x62\x78\x93\xd9\x41\xb1\xbc\xcb\xbc\x77\x89\xe9\x5d\xa6\x85\xd8\x4e\xb2\xf4\xeb\xc7\xf6\x6d\x7b\xff\xbf\x55\x15\x3d\xeb\xe8\xe8\x55\x6b\xa5\x54\xc5\x9a\x74\x3c\xeb\xe8\xdb\x56\x1f\xee\xe1\xdb\x9c\x36\x5c\x5b\xa6\xf6\x97\x20\xdb\xeb\x5f\xef\xcd\xcf\xd9\xf0\xd6\x6e\xbc\xc3\x8c\xe0\xc0\x59\xfc\xf5\xeb\x8f\xc7\x5d\x38\xb8\xfc\x28\xe4\xaa\xa9\x5d\xf0\x5a\x1b\xd2\xee\x50\x7e\x00\x97\xc0\x26\xe9\x20\xd0\xce\xb5\xd0\x87\xd4\x97\xd4\x99\x34\xdd\xd6\xea\xe5\xa4\x4f\x8d\xd1\x54\x9f\x94\x88\x5a\x98\xeb\xc7\xa7\x83\x7d\xb8\x92\x42\x39\xe0\xd3\xae\xc0\x8b\x7a\xbe\x0e\xe9\x2c\xd7\x5d\x25\x1e\x5c\xd2\x2a\x2d\x0b\xca\x70\x35\x50\x92\x94\x8d\xa6\x67\xa4\x5b\xe8\x5b\xe5\x2a\x8b\x94\xde\xa7\x86\x85\xa6\xea\x79\xaa\x3a\xfb\x34\x35\xd1\x6b\x88\x94\xb1\x0a\xd7\x0e\x69\x34\xe5\x0f\xd7\x25\xa5\xcb\xba\x2c\x49\xc3\x75\x54\x67\x9a\x4a\xa7\x9d\xa6\x90\x5c\x47\xe8\x9f\x34\xfa\x76\xd0\xc6\x9a\xca\x12\xa5\xb4\xb6\xd1\xeb\x92\xe8\x24\xd2\x49\xbb\x49\x97\x89\x66\x6b\x35\x4d\xa6\x7c\x21\x9a\xb3\x5a\xdf\x34\x4c\xd0\x3f\xa1\xac\xeb\x74\x3f\xea\x5e\x75\xf6\xe5\x60\xa3\x67\x81\xbd\x5e\x6e\x48\x5f\xd9\xc3\x75\x5a\x9d\x85\x32\x88\x33\x06\x4d\x5c\x28\x09\xd7\x25\x07\x29\x76\xec\xf4\x4c\xe0\x4f\xc9\xe3\xdf\x4b\x92\xf0\xe6\x91\x6a\xca\x8c\xdd\x94\x4a\x20\x15\xd7\x39\xeb\xd9\x13\x4a\x47\x52\x67\xc6\x6c\x78\x8b\x31\xa1\x0c\x65\x9f\x8b\x56\xd1\x89\xb3\x71\x56\xd1\x8f\xb3\x63\x0c\x59\xac\xed\x03\x42\x51\x66\x76\x99\x9e\x2b\x7d\x7c\x30\x6d\x34\xad\xe9\x43\x39\x59\x3a\xf5\x09\xfc\x83\x92\xd6\x24\xe1\x1d\x26\xd3\x72\x05\xda\x6d\xe4\xc3\xc7\x49\x03\xcc\x3a\x1d\x30\x2f\xa4\xe3\x4f\xe3\xe5\x2d\x70\x6f\x2b\x19\x07\x2e\x5e\xce\xc5\x9f\x2e\x3d\x04\xf0\xde\x33\x13\xdf\xd6\x3f\x60\x5d\xda\x1c\xf0\xd8\xf2\x7e\x97\xf5\x7f\x9d\x87\x13\x78\x00\x06\xf5\x3b\x81\x4d\x70\xf1\xe6\x12\x77\x0a\x36\x1e\xf4\x6c\xc8\x7b\x63\x5d\x4f\xcd\x0a\xe0\x01\x00\xe4\x9c\xd4\x87\xac\x21\x18\xe3\x70\x65\x9b\x54\x9d\x1a\xa0\xa2\xae\xa6\xce\xc6\xb9\x09\x2e\x02\x0d\x20\x24\x28\x01\x1d\x82\xd5\x15\xc1\x91\xc9\xe7\x7b\x05\x07\x02\x96\xba\x93\xe0\xe7\x4d\x80\x87\x4c\x2f\xa3\xd4\xab\x9d\x1a\x1e\x3d\x79\x67\x40\x4f\x6a\x64\x0f\x92\xb1\xfe\x03\x82\xa4\x02\x00\x04\xef\x1c\xe4\xdd\xbc\x91\x50\x8f\x53\x7b\x50\x63\x93\x82\x90\x87\xf3\xb6\xc1\xfe\xf0\xf8\x09\x2d\x7d\xff\x2e\xd3\x87\x9a\xbc\x7e\x7c\x97\x20\xb5\xe0\x82\xc0\x46\x72\x7d\xff\xfe\xe3\x14\x04\x00\x7f\x6a\x14\xde\x7e\x08\x56\xde\x60\x92\xa0\x33\x17\x04\xef\x4b\xd8\xe6\x1f\x6f\xbb\x00\x6e\xb5\xf2\x32\xe1\x3d\x84\xc6\xbb\x0a\xe7\x01\x98\xc5\x95\xea\x08\xd0\xb2\xa7\x2e\xe8\x04\x3d\xa9\x12\x0f\xbe\x1e\x50\x73\x05\x0a\x00\x88\x06\x00\xa1\x17\x00\xe7\x72\x05\x14\xd7\xea\x58\x13\x40\x8b\x77\x2c\xde\xbb\xd8\xc3\x5d\xa0\x82\x8c\x38\x3c\x30\x73\x46\x5d\xfd\xaa\x74\xea\x6d\xca\x86\xdd\xfc\xb6\x40\xe6\x75\x45\xc3\x6e\x56\x87\x80\xce\xaf\x51\x32\x3c\x67\xd7\x1a\x84\xe2\x03\x32\xae\x37\x06\xa1\xe5\x30\x33\xab\x85\xf9\xff\x2b\x1a\x76\x19\x7e\xb0\x8b\xef\x62\xf6\xe8\xdf\x61\x76\x6f\xf5\xb0\x8b\xcb\xab\x5d\xfb\x25\x7b\xde\xd8\xaf\x9f\xb1\xe7\xd7\x2b\x23\xfe\x1d\x00\x00\xff\xff\x1a\x45\x68\x15\x00\x20\x00\x00")

func templates_go_bytes() ([]byte, error) {
	return bindata_read(
		_templates_go,
		"templates.go",
	)
}

func templates_go() (*asset, error) {
	bytes, err := templates_go_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates.go", size: 16384, mode: os.FileMode(420), modTime: time.Unix(1463790646, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/rails/.dockerignore": init_rails_dockerignore,
	"init/rails/Dockerfile": init_rails_dockerfile,
	"init/rails/docker-compose.yml": init_rails_docker_compose_yml,
	"init/ruby/.dockerignore": init_ruby_dockerignore,
	"init/ruby/Dockerfile": init_ruby_dockerfile,
	"init/ruby/docker-compose.yml": init_ruby_docker_compose_yml,
	"init/sinatra/.dockerignore": init_sinatra_dockerignore,
	"init/sinatra/Dockerfile": init_sinatra_dockerfile,
	"init/sinatra/docker-compose.yml": init_sinatra_docker_compose_yml,
	"templates.go": templates_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"init": &_bintree_t{nil, map[string]*_bintree_t{
		"rails": &_bintree_t{nil, map[string]*_bintree_t{
			".dockerignore": &_bintree_t{init_rails_dockerignore, map[string]*_bintree_t{
			}},
			"Dockerfile": &_bintree_t{init_rails_dockerfile, map[string]*_bintree_t{
			}},
			"docker-compose.yml": &_bintree_t{init_rails_docker_compose_yml, map[string]*_bintree_t{
			}},
		}},
		"ruby": &_bintree_t{nil, map[string]*_bintree_t{
			".dockerignore": &_bintree_t{init_ruby_dockerignore, map[string]*_bintree_t{
			}},
			"Dockerfile": &_bintree_t{init_ruby_dockerfile, map[string]*_bintree_t{
			}},
			"docker-compose.yml": &_bintree_t{init_ruby_docker_compose_yml, map[string]*_bintree_t{
			}},
		}},
		"sinatra": &_bintree_t{nil, map[string]*_bintree_t{
			".dockerignore": &_bintree_t{init_sinatra_dockerignore, map[string]*_bintree_t{
			}},
			"Dockerfile": &_bintree_t{init_sinatra_dockerfile, map[string]*_bintree_t{
			}},
			"docker-compose.yml": &_bintree_t{init_sinatra_docker_compose_yml, map[string]*_bintree_t{
			}},
		}},
	}},
	"templates.go": &_bintree_t{templates_go, map[string]*_bintree_t{
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

